% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/set_functions.R
\name{set_functions}
\alias{set_functions}
\alias{setf}
\title{set functions for multiple column alterations using data.tables}
\usage{
setf(x, j, value, ...)
}
\arguments{
\item{x}{A data.table. Or, set() accepts data.frame, too.

\code{i} Is left out of this function.}

\item{j}{Column name(s) (character) or number(s) (integer) to be assigned
value when column(s) already exist, and only column name(s) if they are to
be added newly. Additionally, assigning \code{j = 'all'} will automatically
reference all columns in the data.table.}

\item{value}{A list of replacement values to assign by reference to
\code{x[i, j]}. In addition, functions can be passed into the value
argument as well with subsquent arguments in the same way as apply
functions.}

\item{...}{Is used to pass arguments into the value "function" if you choose
to apply a function instead of updating the data with a replacement vector
or list. If you choose to place a \code{.} at any point within the
sequence of additional arguments passed into the \code{value} argument,
the \code{.} will act as a placeholder for the jth column.}
}
\description{
This convenience function updates by reference multiple columns
 by applying a desired function such as \code{numeric}, \code{factor} using
 functions in the same manor as \code{apply()}, or with \code{.} as a
 placeholder. The purpose is to avoid a for loop in conjunction with
 data.table::set.
}
\section{Notes}{
 These functions are for convenience only.
}
\examples{
# Data Table Example 1
dt <- d.t(x = 0:10, y = 10:20)
setf(dt, j = c("x","y"), value = paste0,  ., "hello", "world")
print(dt)

# Data Table Example 2 (same result as Data Table Example 1)
dt <- d.t(x = 0:10, y = 10:20)
setf(dt, j = c("x","y"),
 value = function(x) paste0(x, "hello", "world"))
print(dt)

# Data Frame Example
df_test <- data.frame(a=1:10, b = 2:11, c = 3:12)
setf(df_test, j = c("a", "c"), value = function(x) x+4)
print(df_test)

}

