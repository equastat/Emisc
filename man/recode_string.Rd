% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/recode_string.r
\name{recode_string}
\alias{recode_s}
\alias{recode_string}
\alias{str_rec}
\title{String recoding}
\usage{
recode_s(x, recode_key)

recode_string(x, recode_key)

str_rec(x, recode_key)
}
\arguments{
\item{x}{The input takes a vector of one to many strings, and is optimized
to run without recursion using for loops or apply loops.}

\item{recode_key}{A list of named character vectors or named character
vectors. Adding 'else' into the named list will recode all unspecified
values to the else value.}
}
\value{
A recoded character vector. If  the input was class factor,
the output will be converted to class character.
}
\description{
This vectorized function codes (or maps) input vectors to
strings. It is designed to take a list, or a named vector as the recode
object.
}
\details{
This function uses data.table and an optimized version of
  \code{melt} from reshape2 (via data.table) in order to provide speedy
  string replacement. Primarily designed for use in data.table, but works on
  stand-alone vectors as well.
}
\note{
May actually be slower for small datasets, but speed does not
matter in such cases. Refactoring could be an option if users report
a desire for such an option.
}
\examples{
x <- c("A", "E", 7, "I", "11", "fifteen", 16, NA)

# EXAMPLE 1
recode_key = list(
  '1' = c("A", "B", "C"),
  DD  = c("D", "E", 7),
  '2' = c("H", "I", "J"),
  last_num = c(11, 12, 13),
  'else' = c("somethingelse")
)
recode_string(x, recode_key)

# EXAMPLE 2
recode_key = c(
  "'1'  = c('A','B','C')",
  "'DD' = c('D','E', 7)",
  "'2'  = c('H','I','J')",
  "'last_num' = 11:13",
  "'else' = NA"
)
recode_string(x, recode_key)

# EXAMPLE 3
recode_key = c(
  "'1'  = c('A','B','C')"
)
recode_string(x, recode_key)

# EXAMPLE 4
recode_key = c(
  "'1'  = c('A','B','C');DD = c('D','E', 7);'2' = c('H','I','J');
  last_num = 11:13;'else' = NA"
)
recode_string(x, recode_key)

# EXAMPLE 5
recode_key = list(
  '1' = c("A", "B", "C"),
  DD  = c("D", "E",  7),
  '2' = c("H", "I", "J"),
  last_num = c(11, 12, 13),
  'else' = c(NA))
recode_string(x, recode_key)
\dontrun{
recode_key = c(
  "1  = c('A','B','C)",
  "DD = c('D','E', 7)",
  "2 = c('H','I','J')",
  "last_num = 11:13",
  "else = NA")
}
}

